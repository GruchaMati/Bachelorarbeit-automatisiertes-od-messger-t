from time import sleep
import board
from adafruit_as7341 import AS7341
import matplotlib.pyplot as plt
import numpy as np

i2c = board.I2C()  # verwendet board.SCL und board.SDA
sensor = AS7341(i2c)

# Aktiviert die LED und setzt den LED-Strom
sensor.led_current = 5  # Setzt den LED-Strom auf 5mA
sensor.led = True  # Schaltet die LED aus

channels = ['415nm', '445nm', '480nm', '515nm', '555nm', '590nm', '630nm', '680nm', 'Clear', 'NIR']
colors = ['violet', 'indigo', 'blue', 'cyan', 'green', 'yellow', 'orange', 'red', 'grey', 'black']
fig, ax = plt.subplots()
plt.ion()  # Aktiviert den interaktiven Modus für Matplotlib

while True:
    values = [
        sensor.channel_415nm, sensor.channel_445nm, sensor.channel_480nm,
        sensor.channel_515nm, sensor.channel_555nm, sensor.channel_590nm,
        sensor.channel_630nm, sensor.channel_680nm, sensor.channel_clear,
        sensor.channel_nir
    ]
    scaled_values = [val / 1000 for val in values]

    ax.clear()
    bars = ax.bar(channels, scaled_values, color=colors)
    ax.set_ylabel('Intensität (skaliert)')
    ax.set_title('Lichtintensität nach Spektralbereich')
    ax.set_xticks(np.arange(len(channels)))
    ax.set_xticklabels(channels, rotation=45, ha='right')

    # Fügt die aktuellen Werte als Annotation zu jedem Balken hinzu
    for bar, value in zip(bars, values):
        ax.text(bar.get_x() + bar.get_width() / 2, bar.get_height(), str(int(value)),
                ha='center', va='bottom')

    plt.pause(0.1)  # Pausiert das Skript für 0.1 Sekunde und erlaubt die Aktualisierung der Grafik

    ax.cla()  # Löscht die Daten für das nächste Update
